{"version":3,"sources":["components/SuperHeroCard/index.js","components/NavBar/index.js","components/Header/index.js","components/Frame/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["SuperHeroCard","props","className","key","id","data-id","name","style","backgroundImage","image","onClick","StartGame","NavBar","href","color","padding","score","topScore","Header","Frame","Grid","children","Footer","alt","src","width","height","currentYear","Wrapper","App","state","friends","count","event","target","attributes","getNamedItem","value","shufflefriends","HandleIncremental","setState","shuffleArray","a","i","j","k","length","Math","floor","random","newState","includes","alert","push","this","map","obj","item","lg","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e202f3b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nconst SuperHeroCard = props => (\n  <div\n    className=\"card\"\n    key={props.id}\n    data-id={props.id}\n    name={props.name}\n    style={{ backgroundImage: `url(${props.image})` }}\n    onClick={props.StartGame}\n  ></div>\n);\n\nexport default SuperHeroCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst NavBar = props => (\n  <div>\n    <nav className=\"navbar\">\n      <ul>\n        <li>\n          <a href=\"/\">\n            <span style={{ color: \"black\" }}>\n              <strong>Click SuperHero Game</strong>\n            </span>\n          </a>\n        </li>\n        <li style={{ padding: \"0px 0px 0px 500px\" }}>\n          <p>\n            <strong>Score: {props.score}</strong>\n          </p>\n        </li>\n        <li style={{ padding: \"0px 0px 0px 200px\" }}>\n          <p>\n            <strong>Top Score: {props.topScore}</strong>\n          </p>\n        </li>\n      </ul>\n    </nav>\n  </div>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => (\n  <div>\n    <header className=\"header\">\n      <h1>Click SuperHero Game!</h1>\n      <h2>\n        Click on an image to earn points, but don't click on any more than once!\n      </h2>\n    </header>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Frame = props => <Grid {...props}>{props.children}</Grid>;\n\nexport default Frame;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = props => (\n  <div>\n    <nav className=\"navbar1\">\n      <ul>\n        <li>\n          <p>\n            <small><img alt=\"react\" src=\"./images/react.jpeg\" style={{width:\"25px\",height:\"25px\"}}></img>\n              <strong>\n                Copyright {props.currentYear}, Miguel Galarraga\n              </strong>\n            </small>\n          </p>\n        </li>\n      </ul>\n    </nav>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport SuperHeroCard from \"./components/SuperHeroCard\";\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Frame from \"./components/Frame\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  state = {\n    friends: friends,\n    count: [],\n    topScore: 0\n  };\n\n  StartGame = event => {\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shufflefriends();\n    this.HandleIncremental(name);\n  };\n\n  shufflefriends = () => {\n    this.setState((this.state.friends = this.shuffleArray(this.state.friends)));\n  };\n\n  shuffleArray = a => {\n    var i, j, k;\n    for (i = 0; i < a.length; i++) {\n      j = Math.floor(Math.random() * 12);\n      k = a[i];\n      a[i] = a[j];\n      a[j] = k;\n    }\n    return a;\n  };\n\n  HandleIncremental = name => {\n    const newState = { ...this.state };\n    if (newState.count.includes(name)) {\n      alert(\"TRY AGAIN!\");\n      newState.count = [];\n      this.setState((this.state = newState));\n    } else {\n      newState.count.push(name);\n      this.setState((this.state = newState));\n      if (newState.count.length > newState.topScore) {\n        newState.topScore++;\n        this.setState((this.state = newState));\n        if (newState.topScore === 12) {\n          alert(\"YOU HAVE WON!\");\n          newState.count = [];\n          this.setState((this.state = newState));\n        }\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar\n          topScore={this.state.topScore}\n          score={this.state.count.length}\n        />\n        <Header />\n        {this.state.friends.map(obj => (\n          <Frame item lg={3}>\n            <SuperHeroCard\n              id={obj.id}\n              name={obj.name}\n              image={obj.image}\n              key={obj.id}\n              StartGame={this.StartGame}\n            />\n          </Frame>\n        ))}\n        <Footer currentYear=\"2020\" />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}